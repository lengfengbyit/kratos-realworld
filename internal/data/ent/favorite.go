// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kratos-realworld/internal/data/ent/favorite"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Favorite is the model entity for the Favorite schema.
type Favorite struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// ArticleID holds the value of the "article_id" field.
	ArticleID int64 `json:"article_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Favorite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case favorite.FieldID, favorite.FieldUserID, favorite.FieldArticleID:
			values[i] = new(sql.NullInt64)
		case favorite.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Favorite fields.
func (f *Favorite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case favorite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case favorite.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				f.UserID = value.Int64
			}
		case favorite.FieldArticleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field article_id", values[i])
			} else if value.Valid {
				f.ArticleID = value.Int64
			}
		case favorite.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Favorite.
// This includes values selected through modifiers, order, etc.
func (f *Favorite) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// Update returns a builder for updating this Favorite.
// Note that you need to call Favorite.Unwrap() before calling this method if this Favorite
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Favorite) Update() *FavoriteUpdateOne {
	return NewFavoriteClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Favorite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Favorite) Unwrap() *Favorite {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Favorite is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Favorite) String() string {
	var builder strings.Builder
	builder.WriteString("Favorite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", f.UserID))
	builder.WriteString(", ")
	builder.WriteString("article_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ArticleID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Favorites is a parsable slice of Favorite.
type Favorites []*Favorite
