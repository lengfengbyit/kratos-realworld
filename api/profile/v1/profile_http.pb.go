// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v3.14.0
// source: profile/v1/profile.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProfileFollow = "/profile.v1.Profile/Follow"
const OperationProfileGetProfile = "/profile.v1.Profile/GetProfile"
const OperationProfileUnfollow = "/profile.v1.Profile/Unfollow"

type ProfileHTTPServer interface {
	Follow(context.Context, *ProfileRequest) (*ProfileReply, error)
	GetProfile(context.Context, *ProfileRequest) (*ProfileReply, error)
	Unfollow(context.Context, *ProfileRequest) (*ProfileReply, error)
}

func RegisterProfileHTTPServer(s *http.Server, srv ProfileHTTPServer) {
	r := s.Route("/")
	r.GET("/api/profiles/{username}", _Profile_GetProfile0_HTTP_Handler(srv))
	r.POST("/api/profiles/{username}/follow", _Profile_Follow0_HTTP_Handler(srv))
	r.DELETE("/api/profiles/{username}/follow", _Profile_Unfollow0_HTTP_Handler(srv))
}

func _Profile_GetProfile0_HTTP_Handler(srv ProfileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProfileGetProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfile(ctx, req.(*ProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Profile_Follow0_HTTP_Handler(srv ProfileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProfileFollow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Follow(ctx, req.(*ProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Profile_Unfollow0_HTTP_Handler(srv ProfileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProfileUnfollow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Unfollow(ctx, req.(*ProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProfileReply)
		return ctx.Result(200, reply)
	}
}

type ProfileHTTPClient interface {
	Follow(ctx context.Context, req *ProfileRequest, opts ...http.CallOption) (rsp *ProfileReply, err error)
	GetProfile(ctx context.Context, req *ProfileRequest, opts ...http.CallOption) (rsp *ProfileReply, err error)
	Unfollow(ctx context.Context, req *ProfileRequest, opts ...http.CallOption) (rsp *ProfileReply, err error)
}

type ProfileHTTPClientImpl struct {
	cc *http.Client
}

func NewProfileHTTPClient(client *http.Client) ProfileHTTPClient {
	return &ProfileHTTPClientImpl{client}
}

func (c *ProfileHTTPClientImpl) Follow(ctx context.Context, in *ProfileRequest, opts ...http.CallOption) (*ProfileReply, error) {
	var out ProfileReply
	pattern := "/api/profiles/{username}/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProfileFollow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProfileHTTPClientImpl) GetProfile(ctx context.Context, in *ProfileRequest, opts ...http.CallOption) (*ProfileReply, error) {
	var out ProfileReply
	pattern := "/api/profiles/{username}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProfileGetProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ProfileHTTPClientImpl) Unfollow(ctx context.Context, in *ProfileRequest, opts ...http.CallOption) (*ProfileReply, error) {
	var out ProfileReply
	pattern := "/api/profiles/{username}/follow"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProfileUnfollow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
